import React, { useState, useEffect, useRef, MutableRefObject } from 'react';
import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';
import { Button, Card, Offcanvas } from 'react-bootstrap';
import { useTranslation } from 'react-i18next';
import './ClientAdvisor.css';

interface Question {
  key: string;
  en: string;
  hi: string;
  mr: string;
}

interface ClientAdvisorVoiceWizardProps {
  setAiResponse: (response: string) => void;
}

const questionsData: Question[] = [
  {
    key: 'education',
    en: 'What is your education?',
    hi: '‡§Ü‡§™‡§ï‡•Ä ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?',
    mr: '‡§§‡•Å‡§Æ‡§ö‡§Ç ‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§ï‡§æ‡§Ø ‡§Ü‡§π‡•á?',
  },
  { key: 'age', en: 'What is your age?', hi: '‡§Ü‡§™‡§ï‡•Ä ‡§â‡§Æ‡•ç‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?', mr: '‡§§‡•Å‡§Æ‡§ö‡§Ç ‡§µ‡§Ø ‡§ï‡§æ‡§Ø ‡§Ü‡§π‡•á?' },
  {
    key: 'salary',
    en: 'What is your monthly income?',
    hi: '‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§Ü‡§Ø ‡§ï‡§ø‡§§‡§®‡•Ä ‡§π‡•à?',
    mr: '‡§§‡•Å‡§Æ‡§ö‡§Ç ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§æ‡§Ø ‡§Ü‡§π‡•á?',
  },
  {
    key: 'savings',
    en: 'How much do you save monthly?',
    hi: '‡§Ü‡§™ ‡§π‡§∞ ‡§Æ‡§π‡•Ä‡§®‡•á ‡§ï‡§ø‡§§‡§®‡•Ä ‡§¨‡§ö‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?',
    mr: '‡§§‡•Å‡§Æ ‡§¶‡§∞ ‡§Æ‡§π‡§ø‡§®‡•ç‡§Ø‡§æ‡§≤‡§æ ‡§ï‡§ø‡§§‡•Ä ‡§¨‡§ö‡§§ ‡§ï‡§∞‡§§‡§æ?',
  },
  // {
  //   key: 'support',
  //   en: 'Which type of finance support do you need?',
  //   hi: '‡§Ü‡§™‡§ï‡•ã ‡§ï‡§ø‡§∏ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•Ä ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•à?',
  //   mr: '‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§ï‡•ã‡§£‡§§‡•ç‡§Ø‡§æ‡§π‡•Ä ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡•á‡§Ç‡§§ ‡§≠‡§æ‡§ó ‡§ò‡•á‡§§‡§≤‡§æ‡§Ø ‡§ï‡§æ?',
  // },
];

const ClientAdvisorVoiceWizard: React.FC<ClientAdvisorVoiceWizardProps> = ({ setAiResponse }) => {
  const [show, setShow] = useState<boolean>(false);
  const [current, setCurrent] = useState<number>(0);
  const [answers, setAnswers] = useState<Record<string, string>>({});
  const [lang, setLang] = useState<'en' | 'hi' | 'mr'>('hi');
  const [retryCount, setRetryCount] = useState<number>(0);

  const { transcript, listening, resetTranscript, browserSupportsSpeechRecognition } =
    useSpeechRecognition();
  const { t } = useTranslation();

  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);

  useEffect(() => {
    if (!browserSupportsSpeechRecognition) {
      alert('Speech recognition not supported');
    }
  }, []);

  useEffect(() => {
    if (!listening && transcript.trim() !== '') {
      saveAnswer(transcript.trim());
    }
  }, [listening]);

  const speak = (text: string, callback?: () => void) => {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = lang === 'hi' ? 'hi-IN' : lang === 'mr' ? 'mr-IN' : 'en-US';
    utterance.pitch = 1;
    utterance.rate = 1;

    utterance.onend = () => {
      if (callback) callback();
    };

    window.speechSynthesis.cancel();
    window.speechSynthesis.speak(utterance);
  };

  const handleClose = () => {
  setShow(false);

  // Stop any ongoing voice/speech recognition or speaking
  SpeechRecognition.stopListening();
  window.speechSynthesis.cancel();

  // Clear timeout
  if (timeoutRef.current) {
    clearTimeout(timeoutRef.current);
    timeoutRef.current = null;
  }
};


  const startInterview = () => {
    setShow(true);
    setCurrent(0);
    setAnswers({});
    setRetryCount(0);
    setTimeout(() => {
      askQuestion(0);
    }, 500);
  };

  const askQuestion = (index: number) => {
    if (timeoutRef.current) clearTimeout(timeoutRef.current);

    const q = questionsData[index];
    setRetryCount(0);
    SpeechRecognition.stopListening();

    speak(q[lang], () => {
      startListeningWithTimeout();
    });
  };

  const startListeningWithTimeout = () => {
    resetTranscript();
    SpeechRecognition.startListening({
      continuous: false,
      language: lang === 'hi' ? 'hi-IN' : lang === 'mr' ? 'mr-IN' : 'en-US',
    });

    timeoutRef.current = setTimeout(() => {
      handleNoResponse();
    }, 5000);
  };

  const handleNoResponse = () => {
    SpeechRecognition.stopListening();

    if (retryCount < 2) {
      setRetryCount((prev) => prev + 1);
      const message =
        lang === 'hi'
          ? '‡§Æ‡•à‡§Ç‡§®‡•á ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§∏‡•Å‡§®‡•Ä, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§π‡§∞‡§æ‡§è‡§Ç‡•§'
          : lang === 'mr'
          ? '‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡§ö‡§Ç ‡§â‡§§‡•ç‡§§‡§∞ ‡§ê‡§ï‡•Ç ‡§∂‡§ï‡§≤‡•ã ‡§®‡§æ‡§π‡•Ä, ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§∏‡§æ‡§Ç‡§ó‡§æ.'
          : 'I could not hear you, please repeat.';

      speak(message, () => {
        startListeningWithTimeout();
      });
    } else {
      saveAnswer('No response');
    }
  };

  const saveAnswer = (text: string) => {
    if (timeoutRef.current) clearTimeout(timeoutRef.current);

    const key = questionsData[current].key;
    const newAnswers = { ...answers, [key]: text };
    setAnswers(newAnswers);
    resetTranscript();

    if (current < questionsData.length - 1) {
      setCurrent(current + 1);
      setRetryCount(0);
      askQuestion(current + 1);
    } else {
      finishInterview(newAnswers);
    }
  };

  const finishInterview = async (collectedAnswers: Record<string, string>) => {
    console.log('Collected Profile: ', collectedAnswers);

    SpeechRecognition.stopListening();

    const thankYouMsg =
      lang === 'hi'
        ? '‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§π‡§Æ ‡§Ü‡§™‡§ï‡•á ‡§â‡§§‡•ç‡§§‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•á‡§Ç‡§ó‡•á‡•§'
        : lang === 'mr'
        ? '‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§Ü‡§Æ‡•ç‡§π‡•Ä ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§â‡§§‡•ç‡§§‡§∞‡§æ‡§Ç‡§®‡•Å‡§∏‡§æ‡§∞ ‡§â‡§™‡§æ‡§Ø ‡§∏‡•Å‡§ö‡§µ‡•Ç.'
        : 'Thank you! We will suggest solutions based on your answers.';

    speak(thankYouMsg);
    setTimeout(() => setShow(false), 4000);

    try {
      setAiResponse('loading');

      const res = await fetch('http://localhost:5000/api/suggest', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(collectedAnswers),
      });

      const data = await res.json();
      if (data.suggestion) {
        console.log(data.suggestion);
        setAiResponse(data.suggestion);
      } else {
        setAiResponse('No suggestions returned from AI.');
      }
    } catch (err) {
      console.error('Error contacting backend:', err);
      setAiResponse('Server error. Please try again later.');
    }
  };

  return (
    <>
      <Button
        variant="warning"
        style={{
          position: 'fixed',
          top: '30%',
          right: '16px',
          transform: 'rotate(-90deg)',
          transformOrigin: 'right center',
          zIndex: 1050,
          borderRadius: '8px 8px 0 0',
          padding: '8px 20px',
          fontWeight: 'bold',
          fontSize: '14px',
          boxShadow: '0px 2px 6px rgba(0,0,0,0.2)',
        }}
        onClick={startInterview}
      >
        {t('get_to_know')}
      </Button>
      <Offcanvas show={show} onHide={handleClose} placement="end">
        <Offcanvas.Header closeButton>
          <Offcanvas.Title>{t('get_to_know')}</Offcanvas.Title>
        </Offcanvas.Header>
        <Offcanvas.Body>
          <Card body>
            <p>
              <strong>{t('current_question')}:</strong> {questionsData[current][lang]}
            </p>
            <p>
              <strong>{t('listening')}:</strong> {listening ? 'üé§...' : 'Stopped'}
            </p>
            <p>
              <strong>{t('your_answer')}:</strong> {transcript}
            </p>

            <p className="mt-3">
              <strong>{t('collected')}:</strong>
            </p>
            <pre>{JSON.stringify(answers, null, 2)}</pre>

            <label className="mt-3">Language:</label>
            <select
              value={lang}
              onChange={(e) => setLang(e.target.value as 'en' | 'hi' | 'mr')}
              className="form-select"
            >
              <option value="hi">‡§π‡§ø‡§Ç‡§¶‡•Ä</option>
              <option value="mr">‡§Æ‡§∞‡§æ‡§†‡•Ä</option>
              <option value="en">English</option>
            </select>
          </Card>
        </Offcanvas.Body>
      </Offcanvas>
    </>
  );
};

export default ClientAdvisorVoiceWizard;
